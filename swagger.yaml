swagger: '2.0'
info:
  version: 1.0.0
  title: Test API
  description: A simple REST API test-application usingswagger and symfony.
host: symfony_swagger.sf
basePath: /api
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    get:
      description: return list of users
      operationId: getUsers
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
      responses:
        '200':
          description: list of users
          schema:
            title: users
            type: array
            items:
              $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    post:
      description: create new user
      operationId: createUser
      parameters:
        - name: name
          in: formData
          description: user name
          required: true
          type: string
      responses:
        '201':
          $ref: '#/responses/httpCreate'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /sessions:
    get:
      description: return list of sessions
      operationId: getSessions
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
      responses:
        '200':
          description: list of sessions
          schema:
            title: sessions
            type: array
            items:
              $ref: '#/definitions/session'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    post:
      description: create new session
      operationId: createSession
      parameters:
        - name: name
          in: formData
          description: session name
          required: true
          type: string
        - name: userId
          in: formData
          description: user id
          required: true
          type: integer
          format: int32
        - name: order
          in: formData
          required: false
          description: order desc or asc
          type: string
      responses:
        '201':
          $ref: '#/responses/httpCreate'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /links:
    get:
      description: return list of links
      operationId: getLinks
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/offsetParam'
      responses:
        '200':
          description: Links list
          schema:
            title: links
            type: array
            items:
              $ref: '#/definitions/link'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    post:
      description: create new link
      operationId: createLink
      parameters:
        - name: sessionId
          in: formData
          description: session id containing link
          required: true
          type: integer
          format: int32
        - name: link
          in: formData
          description: link
          required: true
          type: string
      responses:
        '201':
          $ref: '#/responses/httpCreate'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  '/links/{linkId}':
    delete:
      description: delete link
      operationId: deleteLink
      parameters:
        - name: linkId
          in: path
          description: url id
          required: true
          type: integer
          format: int32
      responses:
        '204':
          description: No Content
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
definitions:
  user:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
  session:
    type: object
    required:
      - id
      - name
      - createdAt
      - userId
      - order
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      createdAt:
        type: string
        format: date-time
      order:
        type: string
        default: asc
        enum:
          - asc
          - desc
      userId:
        type: integer
        format: int32
  link:
    type: object
    required:
      - id
      - link
      - createdAt
      - sessionId
    properties:
      id:
        type: integer
        format: int32
      link:
        type: string
      sessionId:
        type: integer
        format: int32
      createdAt:
        type: string
        format: date-time
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
parameters:
  limitParam:
    name: limit
    in: query
    description: max records to return
    required: false
    type: integer
    format: int32
  offsetParam:
    name: offset
    in: query
    description: offset from which to start return records
    required: false
    type: integer
    format: int32
responses:
  httpCreate:
    description: created. empty response
